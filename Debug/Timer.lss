
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000062c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800060  00800060  000006a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f8d  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000809  00000000  00000000  00001891  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad2  00000000  00000000  0000209a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000698  00000000  00000000  00002b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084a  00000000  00000000  00003204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ede  00000000  00000000  00003a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  0000492c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_1>
   8:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_2>
   c:	0c 94 81 01 	jmp	0x302	; 0x302 <__vector_3>
  10:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__vector_4>
  14:	0c 94 c2 02 	jmp	0x584	; 0x584 <__vector_5>
  18:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_6>
  1c:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_7>
  20:	0c 94 47 02 	jmp	0x48e	; 0x48e <__vector_8>
  24:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_9>
  28:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_10>
  2c:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 38       	cpi	r26, 0x86	; 134
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ad 01 	call	0x35a	; 0x35a <main>
  74:	0c 94 14 03 	jmp	0x628	; 0x628 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Dio_SetPinDirection>:
#include "BIT_MATH.h" 
#include "DIO_PRIVATE.h"

void Dio_SetPinDirection(u8 port,u8 pin,u8 Direction)
{
	if(Direction==DIO_PIN_OUTPUT)
  7c:	41 30       	cpi	r20, 0x01	; 1
  7e:	a1 f5       	brne	.+104    	; 0xe8 <Dio_SetPinDirection+0x6c>
	{
		switch(port)
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	89 f0       	breq	.+34     	; 0xa6 <Dio_SetPinDirection+0x2a>
  84:	28 f0       	brcs	.+10     	; 0x90 <Dio_SetPinDirection+0x14>
  86:	82 30       	cpi	r24, 0x02	; 2
  88:	c9 f0       	breq	.+50     	; 0xbc <Dio_SetPinDirection+0x40>
  8a:	83 30       	cpi	r24, 0x03	; 3
  8c:	11 f1       	breq	.+68     	; 0xd2 <Dio_SetPinDirection+0x56>
  8e:	08 95       	ret
		{
		 case DIO_PORTA:
		  SET_BIT(DDRA,pin);
  90:	2a b3       	in	r18, 0x1a	; 26
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <Dio_SetPinDirection+0x20>
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	6a 95       	dec	r22
  9e:	e2 f7       	brpl	.-8      	; 0x98 <Dio_SetPinDirection+0x1c>
  a0:	82 2b       	or	r24, r18
  a2:	8a bb       	out	0x1a, r24	; 26
		     break;
  a4:	08 95       	ret
	      case DIO_PORTB:
			SET_BIT(DDRB,pin);
  a6:	27 b3       	in	r18, 0x17	; 23
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <Dio_SetPinDirection+0x36>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	6a 95       	dec	r22
  b4:	e2 f7       	brpl	.-8      	; 0xae <Dio_SetPinDirection+0x32>
  b6:	82 2b       	or	r24, r18
  b8:	87 bb       	out	0x17, r24	; 23
			break;
  ba:	08 95       	ret
				case DIO_PORTC:
				SET_BIT(DDRC,pin);
  bc:	24 b3       	in	r18, 0x14	; 20
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <Dio_SetPinDirection+0x4c>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <Dio_SetPinDirection+0x48>
  cc:	82 2b       	or	r24, r18
  ce:	84 bb       	out	0x14, r24	; 20
				break;
  d0:	08 95       	ret
					case DIO_PORTD:
					SET_BIT(DDRD,pin);
  d2:	21 b3       	in	r18, 0x11	; 17
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <Dio_SetPinDirection+0x62>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <Dio_SetPinDirection+0x5e>
  e2:	82 2b       	or	r24, r18
  e4:	81 bb       	out	0x11, r24	; 17
					break;
  e6:	08 95       	ret
		}
	}
	else if(Direction==DIO_PIN_INPUT)
  e8:	41 11       	cpse	r20, r1
  ea:	37 c0       	rjmp	.+110    	; 0x15a <Dio_SetPinDirection+0xde>
	{
		switch(port)
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	91 f0       	breq	.+36     	; 0x114 <Dio_SetPinDirection+0x98>
  f0:	28 f0       	brcs	.+10     	; 0xfc <Dio_SetPinDirection+0x80>
  f2:	82 30       	cpi	r24, 0x02	; 2
  f4:	d9 f0       	breq	.+54     	; 0x12c <Dio_SetPinDirection+0xb0>
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	29 f1       	breq	.+74     	; 0x144 <Dio_SetPinDirection+0xc8>
  fa:	08 95       	ret
		{
			  case DIO_PORTA:
		      	CLR_BIT(DDRA,pin);
  fc:	2a b3       	in	r18, 0x1a	; 26
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <Dio_SetPinDirection+0x8c>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <Dio_SetPinDirection+0x88>
 10c:	80 95       	com	r24
 10e:	82 23       	and	r24, r18
 110:	8a bb       	out	0x1a, r24	; 26
		     	break;
 112:	08 95       	ret
			    case DIO_PORTB:
			      CLR_BIT(DDRB,pin);
 114:	27 b3       	in	r18, 0x17	; 23
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <Dio_SetPinDirection+0xa4>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <Dio_SetPinDirection+0xa0>
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	87 bb       	out	0x17, r24	; 23
			        break;
 12a:	08 95       	ret
			         case DIO_PORTC:
			           CLR_BIT(DDRC,pin);
 12c:	24 b3       	in	r18, 0x14	; 20
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <Dio_SetPinDirection+0xbc>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <Dio_SetPinDirection+0xb8>
 13c:	80 95       	com	r24
 13e:	82 23       	and	r24, r18
 140:	84 bb       	out	0x14, r24	; 20
			           break;
 142:	08 95       	ret
			             case DIO_PORTD:
			                CLR_BIT(DDRD,pin);
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <Dio_SetPinDirection+0xd4>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <Dio_SetPinDirection+0xd0>
 154:	80 95       	com	r24
 156:	82 23       	and	r24, r18
 158:	81 bb       	out	0x11, r24	; 17
 15a:	08 95       	ret

0000015c <Dio_SetPinValue>:
	}
	
}
void Dio_SetPinValue(u8 port,u8 pin,u8 value)
{
	if(value==DIO_PIN_HIGH)
 15c:	41 30       	cpi	r20, 0x01	; 1
 15e:	a1 f5       	brne	.+104    	; 0x1c8 <Dio_SetPinValue+0x6c>
	{
		switch(port)
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	89 f0       	breq	.+34     	; 0x186 <Dio_SetPinValue+0x2a>
 164:	28 f0       	brcs	.+10     	; 0x170 <Dio_SetPinValue+0x14>
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	c9 f0       	breq	.+50     	; 0x19c <Dio_SetPinValue+0x40>
 16a:	83 30       	cpi	r24, 0x03	; 3
 16c:	11 f1       	breq	.+68     	; 0x1b2 <Dio_SetPinValue+0x56>
 16e:	08 95       	ret
		{
			     case DIO_PORTA:
			           SET_BIT(PORTA,pin);
 170:	2b b3       	in	r18, 0x1b	; 27
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <Dio_SetPinValue+0x20>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <Dio_SetPinValue+0x1c>
 180:	82 2b       	or	r24, r18
 182:	8b bb       	out	0x1b, r24	; 27
			             break;
 184:	08 95       	ret
			              case DIO_PORTB:
			                 SET_BIT(PORTB,pin);
 186:	28 b3       	in	r18, 0x18	; 24
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <Dio_SetPinValue+0x36>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <Dio_SetPinValue+0x32>
 196:	82 2b       	or	r24, r18
 198:	88 bb       	out	0x18, r24	; 24
			                     break;
 19a:	08 95       	ret
			                        case DIO_PORTC:
			                            SET_BIT(PORTC,pin);
 19c:	25 b3       	in	r18, 0x15	; 21
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <Dio_SetPinValue+0x4c>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <Dio_SetPinValue+0x48>
 1ac:	82 2b       	or	r24, r18
 1ae:	85 bb       	out	0x15, r24	; 21
			                                   break;
 1b0:	08 95       	ret
			                            case DIO_PORTD:
			                               SET_BIT(PORTD,pin);
 1b2:	22 b3       	in	r18, 0x12	; 18
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <Dio_SetPinValue+0x62>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <Dio_SetPinValue+0x5e>
 1c2:	82 2b       	or	r24, r18
 1c4:	82 bb       	out	0x12, r24	; 18
			                                      break;
 1c6:	08 95       	ret
		}
	}
	else if(value==DIO_PIN_LOW)
 1c8:	41 11       	cpse	r20, r1
 1ca:	37 c0       	rjmp	.+110    	; 0x23a <Dio_SetPinValue+0xde>
	{
		switch(port)
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	91 f0       	breq	.+36     	; 0x1f4 <Dio_SetPinValue+0x98>
 1d0:	28 f0       	brcs	.+10     	; 0x1dc <Dio_SetPinValue+0x80>
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	d9 f0       	breq	.+54     	; 0x20c <Dio_SetPinValue+0xb0>
 1d6:	83 30       	cpi	r24, 0x03	; 3
 1d8:	29 f1       	breq	.+74     	; 0x224 <Dio_SetPinValue+0xc8>
 1da:	08 95       	ret
		{
			                    case DIO_PORTA:
			                      CLR_BIT(PORTA,pin);
 1dc:	2b b3       	in	r18, 0x1b	; 27
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <Dio_SetPinValue+0x8c>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <Dio_SetPinValue+0x88>
 1ec:	80 95       	com	r24
 1ee:	82 23       	and	r24, r18
 1f0:	8b bb       	out	0x1b, r24	; 27
			                          break;
 1f2:	08 95       	ret
			                         case DIO_PORTB:
			                          CLR_BIT(PORTB,pin);
 1f4:	28 b3       	in	r18, 0x18	; 24
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <Dio_SetPinValue+0xa4>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <Dio_SetPinValue+0xa0>
 204:	80 95       	com	r24
 206:	82 23       	and	r24, r18
 208:	88 bb       	out	0x18, r24	; 24
			                             break;
 20a:	08 95       	ret
			                              case DIO_PORTC:
			                                 CLR_BIT(PORTC,pin);
 20c:	25 b3       	in	r18, 0x15	; 21
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <Dio_SetPinValue+0xbc>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <Dio_SetPinValue+0xb8>
 21c:	80 95       	com	r24
 21e:	82 23       	and	r24, r18
 220:	85 bb       	out	0x15, r24	; 21
			                                      break;
 222:	08 95       	ret
			                                    case DIO_PORTD:
			                                        CLR_BIT(PORTD,pin);
 224:	22 b3       	in	r18, 0x12	; 18
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <Dio_SetPinValue+0xd4>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <Dio_SetPinValue+0xd0>
 234:	80 95       	com	r24
 236:	82 23       	and	r24, r18
 238:	82 bb       	out	0x12, r24	; 18
 23a:	08 95       	ret

0000023c <EXTI_voidClearFlag>:
 */
void EXTI_voidSetCallBack( void (*Copy_pvoidCallBack)(void) , u8 Copy_u8EXTILine ){

	if( Copy_pvoidCallBack != NULL ){

		EXTI_CallBack[Copy_u8EXTILine] = Copy_pvoidCallBack ;
 23c:	9a b7       	in	r25, 0x3a	; 58
 23e:	21 e0       	ldi	r18, 0x01	; 1
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <EXTI_voidClearFlag+0xc>
 244:	22 0f       	add	r18, r18
 246:	33 1f       	adc	r19, r19
 248:	8a 95       	dec	r24
 24a:	e2 f7       	brpl	.-8      	; 0x244 <EXTI_voidClearFlag+0x8>
 24c:	29 2b       	or	r18, r25
 24e:	2a bf       	out	0x3a, r18	; 58
 250:	08 95       	ret

00000252 <__vector_1>:


/* ISR --> Implementation */
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	2f 93       	push	r18
 25e:	3f 93       	push	r19
 260:	4f 93       	push	r20
 262:	5f 93       	push	r21
 264:	6f 93       	push	r22
 266:	7f 93       	push	r23
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31

	if( EXTI_CallBack[0] != NULL ){
 274:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 278:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 27c:	30 97       	sbiw	r30, 0x00	; 0
 27e:	21 f0       	breq	.+8      	; 0x288 <__vector_1+0x36>

		EXTI_CallBack[0](); /*  Call The Global Pointer to Func   */
 280:	09 95       	icall
		EXTI_voidClearFlag( EXTI_LINE0 );
 282:	86 e0       	ldi	r24, 0x06	; 6
 284:	0e 94 1e 01 	call	0x23c	; 0x23c <EXTI_voidClearFlag>

	}

}
 288:	ff 91       	pop	r31
 28a:	ef 91       	pop	r30
 28c:	bf 91       	pop	r27
 28e:	af 91       	pop	r26
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	7f 91       	pop	r23
 296:	6f 91       	pop	r22
 298:	5f 91       	pop	r21
 29a:	4f 91       	pop	r20
 29c:	3f 91       	pop	r19
 29e:	2f 91       	pop	r18
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	2f 93       	push	r18
 2b6:	3f 93       	push	r19
 2b8:	4f 93       	push	r20
 2ba:	5f 93       	push	r21
 2bc:	6f 93       	push	r22
 2be:	7f 93       	push	r23
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	af 93       	push	r26
 2c6:	bf 93       	push	r27
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31

	if( EXTI_CallBack[1] != NULL ){
 2cc:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2d0:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 2d4:	30 97       	sbiw	r30, 0x00	; 0
 2d6:	21 f0       	breq	.+8      	; 0x2e0 <__vector_2+0x36>

		EXTI_CallBack[1]();
 2d8:	09 95       	icall
		EXTI_voidClearFlag( EXTI_LINE1 );
 2da:	87 e0       	ldi	r24, 0x07	; 7
 2dc:	0e 94 1e 01 	call	0x23c	; 0x23c <EXTI_voidClearFlag>

	}

}
 2e0:	ff 91       	pop	r31
 2e2:	ef 91       	pop	r30
 2e4:	bf 91       	pop	r27
 2e6:	af 91       	pop	r26
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	7f 91       	pop	r23
 2ee:	6f 91       	pop	r22
 2f0:	5f 91       	pop	r21
 2f2:	4f 91       	pop	r20
 2f4:	3f 91       	pop	r19
 2f6:	2f 91       	pop	r18
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	11 24       	eor	r1, r1
 30c:	2f 93       	push	r18
 30e:	3f 93       	push	r19
 310:	4f 93       	push	r20
 312:	5f 93       	push	r21
 314:	6f 93       	push	r22
 316:	7f 93       	push	r23
 318:	8f 93       	push	r24
 31a:	9f 93       	push	r25
 31c:	af 93       	push	r26
 31e:	bf 93       	push	r27
 320:	ef 93       	push	r30
 322:	ff 93       	push	r31

	if( EXTI_CallBack[2] != NULL ){
 324:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 328:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 32c:	30 97       	sbiw	r30, 0x00	; 0
 32e:	21 f0       	breq	.+8      	; 0x338 <__vector_3+0x36>

		EXTI_CallBack[2]();
 330:	09 95       	icall
		EXTI_voidClearFlag( EXTI_LINE2 );
 332:	85 e0       	ldi	r24, 0x05	; 5
 334:	0e 94 1e 01 	call	0x23c	; 0x23c <EXTI_voidClearFlag>

	}

 338:	ff 91       	pop	r31
 33a:	ef 91       	pop	r30
 33c:	bf 91       	pop	r27
 33e:	af 91       	pop	r26
 340:	9f 91       	pop	r25
 342:	8f 91       	pop	r24
 344:	7f 91       	pop	r23
 346:	6f 91       	pop	r22
 348:	5f 91       	pop	r21
 34a:	4f 91       	pop	r20
 34c:	3f 91       	pop	r19
 34e:	2f 91       	pop	r18
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <main>:
#include "DIO_INTERFACE.h"


int main(void)
{
    TIMER0_voidInit();
 35a:	0e 94 ba 01 	call	0x374	; 0x374 <TIMER0_voidInit>
	
	Dio_SetPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_OUTPUT);
 35e:	41 e0       	ldi	r20, 0x01	; 1
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_SetPinDirection>
	
    while (1) 
    {
		Dio_SetPinValue(DIO_PORTA,DIO_PIN0,DIO_PIN_HIGH);
 368:	41 e0       	ldi	r20, 0x01	; 1
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	0e 94 ae 00 	call	0x15c	; 0x15c <Dio_SetPinValue>
 372:	fa cf       	rjmp	.-12     	; 0x368 <main+0xe>

00000374 <TIMER0_voidInit>:
	{
		Local_u8ErrorState = NULL_POINTER ;
	}

	return Local_u8ErrorState ;
}
 374:	83 b7       	in	r24, 0x33	; 51
 376:	8f 7b       	andi	r24, 0xBF	; 191
 378:	83 bf       	out	0x33, r24	; 51
 37a:	83 b7       	in	r24, 0x33	; 51
 37c:	87 7f       	andi	r24, 0xF7	; 247
 37e:	83 bf       	out	0x33, r24	; 51
 380:	80 ec       	ldi	r24, 0xC0	; 192
 382:	82 bf       	out	0x32, r24	; 50
 384:	89 b7       	in	r24, 0x39	; 57
 386:	81 60       	ori	r24, 0x01	; 1
 388:	89 bf       	out	0x39, r24	; 57
 38a:	83 b7       	in	r24, 0x33	; 51
 38c:	88 7f       	andi	r24, 0xF8	; 248
 38e:	83 bf       	out	0x33, r24	; 51
 390:	83 b7       	in	r24, 0x33	; 51
 392:	82 60       	ori	r24, 0x02	; 2
 394:	83 bf       	out	0x33, r24	; 51
 396:	08 95       	ret

00000398 <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
 398:	1f 92       	push	r1
 39a:	0f 92       	push	r0
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	0f 92       	push	r0
 3a0:	11 24       	eor	r1, r1
 3a2:	2f 93       	push	r18
 3a4:	3f 93       	push	r19
 3a6:	4f 93       	push	r20
 3a8:	5f 93       	push	r21
 3aa:	6f 93       	push	r22
 3ac:	7f 93       	push	r23
 3ae:	8f 93       	push	r24
 3b0:	9f 93       	push	r25
 3b2:	af 93       	push	r26
 3b4:	bf 93       	push	r27
 3b6:	ef 93       	push	r30
 3b8:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
 3ba:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <TIMERS_pvCallBackFunc+0x16>
 3be:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <TIMERS_pvCallBackFunc+0x17>
 3c2:	30 97       	sbiw	r30, 0x00	; 0
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <__vector_11+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
 3c6:	09 95       	icall
	}
}
 3c8:	ff 91       	pop	r31
 3ca:	ef 91       	pop	r30
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	7f 91       	pop	r23
 3d6:	6f 91       	pop	r22
 3d8:	5f 91       	pop	r21
 3da:	4f 91       	pop	r20
 3dc:	3f 91       	pop	r19
 3de:	2f 91       	pop	r18
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
 3ea:	1f 92       	push	r1
 3ec:	0f 92       	push	r0
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	0f 92       	push	r0
 3f2:	11 24       	eor	r1, r1
 3f4:	2f 93       	push	r18
 3f6:	3f 93       	push	r19
 3f8:	4f 93       	push	r20
 3fa:	5f 93       	push	r21
 3fc:	6f 93       	push	r22
 3fe:	7f 93       	push	r23
 400:	8f 93       	push	r24
 402:	9f 93       	push	r25
 404:	af 93       	push	r26
 406:	bf 93       	push	r27
 408:	ef 93       	push	r30
 40a:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
 40c:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <TIMERS_pvCallBackFunc+0x14>
 410:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <TIMERS_pvCallBackFunc+0x15>
 414:	30 97       	sbiw	r30, 0x00	; 0
 416:	09 f0       	breq	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
 418:	09 95       	icall
	}
}
 41a:	ff 91       	pop	r31
 41c:	ef 91       	pop	r30
 41e:	bf 91       	pop	r27
 420:	af 91       	pop	r26
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	7f 91       	pop	r23
 428:	6f 91       	pop	r22
 42a:	5f 91       	pop	r21
 42c:	4f 91       	pop	r20
 42e:	3f 91       	pop	r19
 430:	2f 91       	pop	r18
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
 43c:	1f 92       	push	r1
 43e:	0f 92       	push	r0
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	0f 92       	push	r0
 444:	11 24       	eor	r1, r1
 446:	2f 93       	push	r18
 448:	3f 93       	push	r19
 44a:	4f 93       	push	r20
 44c:	5f 93       	push	r21
 44e:	6f 93       	push	r22
 450:	7f 93       	push	r23
 452:	8f 93       	push	r24
 454:	9f 93       	push	r25
 456:	af 93       	push	r26
 458:	bf 93       	push	r27
 45a:	ef 93       	push	r30
 45c:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
 45e:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <TIMERS_pvCallBackFunc+0x12>
 462:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <TIMERS_pvCallBackFunc+0x13>
 466:	30 97       	sbiw	r30, 0x00	; 0
 468:	09 f0       	breq	.+2      	; 0x46c <__vector_9+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
 46a:	09 95       	icall
	}
}
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	bf 91       	pop	r27
 472:	af 91       	pop	r26
 474:	9f 91       	pop	r25
 476:	8f 91       	pop	r24
 478:	7f 91       	pop	r23
 47a:	6f 91       	pop	r22
 47c:	5f 91       	pop	r21
 47e:	4f 91       	pop	r20
 480:	3f 91       	pop	r19
 482:	2f 91       	pop	r18
 484:	0f 90       	pop	r0
 486:	0f be       	out	0x3f, r0	; 63
 488:	0f 90       	pop	r0
 48a:	1f 90       	pop	r1
 48c:	18 95       	reti

0000048e <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
 48e:	1f 92       	push	r1
 490:	0f 92       	push	r0
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	0f 92       	push	r0
 496:	11 24       	eor	r1, r1
 498:	2f 93       	push	r18
 49a:	3f 93       	push	r19
 49c:	4f 93       	push	r20
 49e:	5f 93       	push	r21
 4a0:	6f 93       	push	r22
 4a2:	7f 93       	push	r23
 4a4:	8f 93       	push	r24
 4a6:	9f 93       	push	r25
 4a8:	af 93       	push	r26
 4aa:	bf 93       	push	r27
 4ac:	ef 93       	push	r30
 4ae:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
 4b0:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <TIMERS_pvCallBackFunc+0x10>
 4b4:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <TIMERS_pvCallBackFunc+0x11>
 4b8:	30 97       	sbiw	r30, 0x00	; 0
 4ba:	09 f0       	breq	.+2      	; 0x4be <__vector_8+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
 4bc:	09 95       	icall
	}
}
 4be:	ff 91       	pop	r31
 4c0:	ef 91       	pop	r30
 4c2:	bf 91       	pop	r27
 4c4:	af 91       	pop	r26
 4c6:	9f 91       	pop	r25
 4c8:	8f 91       	pop	r24
 4ca:	7f 91       	pop	r23
 4cc:	6f 91       	pop	r22
 4ce:	5f 91       	pop	r21
 4d0:	4f 91       	pop	r20
 4d2:	3f 91       	pop	r19
 4d4:	2f 91       	pop	r18
 4d6:	0f 90       	pop	r0
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	0f 90       	pop	r0
 4dc:	1f 90       	pop	r1
 4de:	18 95       	reti

000004e0 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
 4e0:	1f 92       	push	r1
 4e2:	0f 92       	push	r0
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	0f 92       	push	r0
 4e8:	11 24       	eor	r1, r1
 4ea:	2f 93       	push	r18
 4ec:	3f 93       	push	r19
 4ee:	4f 93       	push	r20
 4f0:	5f 93       	push	r21
 4f2:	6f 93       	push	r22
 4f4:	7f 93       	push	r23
 4f6:	8f 93       	push	r24
 4f8:	9f 93       	push	r25
 4fa:	af 93       	push	r26
 4fc:	bf 93       	push	r27
 4fe:	ef 93       	push	r30
 500:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
 502:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <TIMERS_pvCallBackFunc+0xe>
 506:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <TIMERS_pvCallBackFunc+0xf>
 50a:	30 97       	sbiw	r30, 0x00	; 0
 50c:	09 f0       	breq	.+2      	; 0x510 <__vector_7+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
 50e:	09 95       	icall
	}
}
 510:	ff 91       	pop	r31
 512:	ef 91       	pop	r30
 514:	bf 91       	pop	r27
 516:	af 91       	pop	r26
 518:	9f 91       	pop	r25
 51a:	8f 91       	pop	r24
 51c:	7f 91       	pop	r23
 51e:	6f 91       	pop	r22
 520:	5f 91       	pop	r21
 522:	4f 91       	pop	r20
 524:	3f 91       	pop	r19
 526:	2f 91       	pop	r18
 528:	0f 90       	pop	r0
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	0f 90       	pop	r0
 52e:	1f 90       	pop	r1
 530:	18 95       	reti

00000532 <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
 532:	1f 92       	push	r1
 534:	0f 92       	push	r0
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	2f 93       	push	r18
 53e:	3f 93       	push	r19
 540:	4f 93       	push	r20
 542:	5f 93       	push	r21
 544:	6f 93       	push	r22
 546:	7f 93       	push	r23
 548:	8f 93       	push	r24
 54a:	9f 93       	push	r25
 54c:	af 93       	push	r26
 54e:	bf 93       	push	r27
 550:	ef 93       	push	r30
 552:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
 554:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <TIMERS_pvCallBackFunc+0xc>
 558:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <TIMERS_pvCallBackFunc+0xd>
 55c:	30 97       	sbiw	r30, 0x00	; 0
 55e:	09 f0       	breq	.+2      	; 0x562 <__vector_6+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
 560:	09 95       	icall
	}
}
 562:	ff 91       	pop	r31
 564:	ef 91       	pop	r30
 566:	bf 91       	pop	r27
 568:	af 91       	pop	r26
 56a:	9f 91       	pop	r25
 56c:	8f 91       	pop	r24
 56e:	7f 91       	pop	r23
 570:	6f 91       	pop	r22
 572:	5f 91       	pop	r21
 574:	4f 91       	pop	r20
 576:	3f 91       	pop	r19
 578:	2f 91       	pop	r18
 57a:	0f 90       	pop	r0
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	0f 90       	pop	r0
 580:	1f 90       	pop	r1
 582:	18 95       	reti

00000584 <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
 584:	1f 92       	push	r1
 586:	0f 92       	push	r0
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	0f 92       	push	r0
 58c:	11 24       	eor	r1, r1
 58e:	2f 93       	push	r18
 590:	3f 93       	push	r19
 592:	4f 93       	push	r20
 594:	5f 93       	push	r21
 596:	6f 93       	push	r22
 598:	7f 93       	push	r23
 59a:	8f 93       	push	r24
 59c:	9f 93       	push	r25
 59e:	af 93       	push	r26
 5a0:	bf 93       	push	r27
 5a2:	ef 93       	push	r30
 5a4:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
 5a6:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <TIMERS_pvCallBackFunc+0xa>
 5aa:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <TIMERS_pvCallBackFunc+0xb>
 5ae:	30 97       	sbiw	r30, 0x00	; 0
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <__vector_5+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
 5b2:	09 95       	icall
	}
}
 5b4:	ff 91       	pop	r31
 5b6:	ef 91       	pop	r30
 5b8:	bf 91       	pop	r27
 5ba:	af 91       	pop	r26
 5bc:	9f 91       	pop	r25
 5be:	8f 91       	pop	r24
 5c0:	7f 91       	pop	r23
 5c2:	6f 91       	pop	r22
 5c4:	5f 91       	pop	r21
 5c6:	4f 91       	pop	r20
 5c8:	3f 91       	pop	r19
 5ca:	2f 91       	pop	r18
 5cc:	0f 90       	pop	r0
 5ce:	0f be       	out	0x3f, r0	; 63
 5d0:	0f 90       	pop	r0
 5d2:	1f 90       	pop	r1
 5d4:	18 95       	reti

000005d6 <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
 5d6:	1f 92       	push	r1
 5d8:	0f 92       	push	r0
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	0f 92       	push	r0
 5de:	11 24       	eor	r1, r1
 5e0:	2f 93       	push	r18
 5e2:	3f 93       	push	r19
 5e4:	4f 93       	push	r20
 5e6:	5f 93       	push	r21
 5e8:	6f 93       	push	r22
 5ea:	7f 93       	push	r23
 5ec:	8f 93       	push	r24
 5ee:	9f 93       	push	r25
 5f0:	af 93       	push	r26
 5f2:	bf 93       	push	r27
 5f4:	ef 93       	push	r30
 5f6:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
 5f8:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <TIMERS_pvCallBackFunc+0x8>
 5fc:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <TIMERS_pvCallBackFunc+0x9>
 600:	30 97       	sbiw	r30, 0x00	; 0
 602:	09 f0       	breq	.+2      	; 0x606 <__vector_4+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
 604:	09 95       	icall
	}
}
 606:	ff 91       	pop	r31
 608:	ef 91       	pop	r30
 60a:	bf 91       	pop	r27
 60c:	af 91       	pop	r26
 60e:	9f 91       	pop	r25
 610:	8f 91       	pop	r24
 612:	7f 91       	pop	r23
 614:	6f 91       	pop	r22
 616:	5f 91       	pop	r21
 618:	4f 91       	pop	r20
 61a:	3f 91       	pop	r19
 61c:	2f 91       	pop	r18
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0
 624:	1f 90       	pop	r1
 626:	18 95       	reti

00000628 <_exit>:
 628:	f8 94       	cli

0000062a <__stop_program>:
 62a:	ff cf       	rjmp	.-2      	; 0x62a <__stop_program>
